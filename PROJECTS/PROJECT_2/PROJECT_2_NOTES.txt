************************PROJECT_2 NOTES***************************

-------------------------BEFORE LOOKING AT THIS PROJECT_1 -----------------------
First, look at PROJECT_1_NOTES.txt to understand how to create the main JSON package
and to correctly add the "express" and "esm"  modules using npm.

Remember that before we were executing commands in the terminal like this (any of them):
>> node server.js
>> node --experimental-modules m3.js
>> node -r esm server.js              (this one requires package "esm" installed)
(one of them should work fine, they are different available methods)
In this project, we will be looking on how to "automate" this task properly.



After those dependencies are installed, we will now start working with express!!!


-----------------------------SIMPLE SERVER-------------------------------------------
The server is going to be in "server.js" file.



---------------------------INITIALIZE SERVER-----------------------------------------
In order to be able to "initialize" our server.js , we will add a special instruction to 
the "package.json" file, that is going to execute correctly the server.
This is based on the "scripts" that the package.json gives us:
So inside the package.json file we add: 
  "scripts": {
    "start": "node -r esm server.js"
  },
This is basically telling us that when we run "start", the "node -r esm server.js" will run,
this gives us te advantage of "automating" some stuff.
So to start the server (the server.js file), now we have to run:
 >> npm start
 >> npm run start
 (both are exactly the same)
 (there are some that have "shortcuts" like the "npm start", but some other don't )


Now we can start to work properly like the pro's!!



------------------------------HTTP BASIC COMMANDS--------------------------------------
We must include the "import http from 'http' " in our server.js , because we will use this
module functionality to interact correctly with the HTTP protocols (request and responses)

but this library is really poor and makes us use a lot of extra libraries to work fine,
so the best way to actually work with a server is using EXPRESS.JS !!!!!
(therefore, our project_2 will be with express.js )



-----------------------------------EXPRESS----------------------------------------------
Express is a really good framework for web servers and helps us to handle everything easier
Look at "server.js" to understand the basic concepts about express servers.



---------------------------------NODEMON------------------------------------------------
This library is an excellent way to keep the server "auto-updating" when we make changes in 
the server even if it's running.
An important thing to notice is that this will only matter in "development mode", this means
that when we are testing the app, it will work, but it is NOT necessary to use it in 
the production server.
Because of this, it is better to install it in "D" mode ("Development") and the way to add 
the package with this consideration is writing in terminal:

>>npm install -D nodemon   (same as:  >>npm i -D nodemon)

Now, when we want to run the server with "nodemon" functionality, we can run it like:
>>nodemon server.js

(But using the new skills for automating processes, we can add a "scripts" file named "dev",
and when we want to run our server as development, we can run:
>>npm run dev     )




